967. Numbers With Same Consecutive Differences

Given two integers n and k, return an array of all the integers of length n where the difference between
 every two consecutive digits is k. You may return the answer in any order.

Note that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.

 

Example 1:

Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.
Example 2:

Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
 

Constraints:

2 <= n <= 9
0 <= k <= 9

Method 1(DFS):-
__________________________________________________________________

class Solution:
    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:
        if n == 1:
            return [i for i in range(10)]

        ans = []

        def dfs(N, num):
            if N == 0:
                return ans.append(num)
            
            end_digit = num % 10
            next_digits = set([end_digit + k, end_digit - k])
            for nextdigit in next_digits:
                if 0 <= nextdigit < 10:
                    new = num * 10 + nextdigit
                    dfs(N-1, new)
            
        for num in range(1, 10):
            dfs(n - 1, num)
        
        return ans

Method 2:-(BFS)
___________________________________________________________________

class Solution:
    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:

        if N == 1:
            return [i for i in range(10)]

        # initialize the queue with candidates for the first level
        queue = [digit for digit in range(1, 10)]

        for level in range(N-1):
            next_queue = []
            for num in queue:
                tail_digit = num % 10
                # using set() to avoid duplicates when K == 0
                next_digits = set([tail_digit + K, tail_digit - K])

                for next_digit in next_digits:
                    if 0 <= next_digit < 10:
                        new_num = num * 10 + next_digit
                        next_queue.append(new_num)
            # start the next level
            queue = next_queue

        return queue

















#####