257. Binary Tree Paths

Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        path = []

        def traverse(curr, pthtillnow):
            if curr.left is None and curr.right is None:
                path.append("->".join(pthtillnow))
                return 

            if curr.left:
                traverse(curr.left, pthtillnow + [str(curr.left.val)])

            if curr.right:
                traverse(curr.right, pthtillnow + [str(curr.right.val)])

        
        traverse(root, [str(root.val)])
        return path













# visibility