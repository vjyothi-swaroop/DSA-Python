5. Longest Palindromic Substring

Hint
Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

class Solution:

    def helper(self, s, begin, end):
        while(begin >= 0 and end <= len(s) - 1 and s[begin] == s[end]):
            begin -= 1
            end += 1
        return s[begin + 1 : end]

    def longestPalindrome(self, s: str) -> str:
        if len(s) == 0:
          return null

        if len(s) == 1:
          return s
        
        long = s[0:1]
        for i in range(0, len(s)):

            sub = self.helper(s, i, i)
            if(len(sub) > len(long)):
              long = sub
            
            sub = self.helper(s, i, i + 1)
            if(len(sub) > len(long)):
                long = sub
        
        return long



















#Visibility purpose